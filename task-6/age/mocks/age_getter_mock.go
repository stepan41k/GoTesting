// Code generated by MockGen. DO NOT EDIT.
// Source: mock_data.go
//
// Generated by this command:
//
//	mockgen -source=mock_data.go -destination=mocks/age_getter_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAgeGetter is a mock of AgeGetter interface.
type MockAgeGetter struct {
	ctrl     *gomock.Controller
	recorder *MockAgeGetterMockRecorder
	isgomock struct{}
}

// MockAgeGetterMockRecorder is the mock recorder for MockAgeGetter.
type MockAgeGetterMockRecorder struct {
	mock *MockAgeGetter
}

// NewMockAgeGetter creates a new mock instance.
func NewMockAgeGetter(ctrl *gomock.Controller) *MockAgeGetter {
	mock := &MockAgeGetter{ctrl: ctrl}
	mock.recorder = &MockAgeGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgeGetter) EXPECT() *MockAgeGetterMockRecorder {
	return m.recorder
}

// GetAge mocks base method.
func (m *MockAgeGetter) GetAge(firstName string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAge", firstName)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAge indicates an expected call of GetAge.
func (mr *MockAgeGetterMockRecorder) GetAge(firstName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAge", reflect.TypeOf((*MockAgeGetter)(nil).GetAge), firstName)
}
